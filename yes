//Unit tests
// tests/setup.js
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');

let mongoServer;

// Setup test database before all tests
beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  const mongoUri = mongoServer.getUri();
  
  await mongoose.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
});

// Clean up after all tests
afterAll(async () => {
  await mongoose.disconnect();
  await mongoServer.stop();
});

// Clear database before each test
beforeEach(async () => {
  const collections = mongoose.connection.collections;
  for (const key in collections) {
    const collection = collections[key];
    await collection.deleteMany({});
  }
});

// ========================================
// tests/auth.test.js - User Registration & Authentication Tests
// ========================================

const request = require('supertest');
const app = require('../app'); // Your Express app
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

describe('User Authentication', () => {
  
  // ✅ USER REGISTRATION TESTS
  describe('POST /api/auth/signup', () => {
    
    test('Should register a new user with valid data', async () => {
      const newUser = {
        firstName: 'Marie',
        lastName: 'Tchamba',
        email: 'marie.tchamba@gmail.com',
        phone: '+237679456789',
        password: 'SecurePass123!',
        address: 'Nlongkak, Yaoundé',
        userType: 'client'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(newUser)
        .expect(201);

      // Verify response structure
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('message', 'User registered successfully');
      expect(response.body).toHaveProperty('user');
      expect(response.body.user).toHaveProperty('email', newUser.email);
      expect(response.body.user).not.toHaveProperty('password'); // Password should not be returned

      // Verify user was saved in database
      const savedUser = await User.findOne({ email: newUser.email });
      expect(savedUser).toBeTruthy();
      expect(savedUser.firstName).toBe(newUser.firstName);
      expect(savedUser.phone).toBe(newUser.phone);
    });

    test('Should fail registration with invalid email format', async () => {
      const invalidUser = {
        firstName: 'John',
        lastName: 'Doe',
        email: 'invalid-email-format',
        phone: '+237679456789',
        password: 'SecurePass123!',
        address: 'Bastos, Yaoundé',
        userType: 'client'
      };

      const response = await request(app)
        .post('/api/auth/signup')
        .send(invalidUser)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message');
      expect(response.body.message).toContain('email');
    });

    test('Should fail registration with missing required fields', async () => {
      const incompleteUser = {
        firstName: 'John',
        email: 'john@example.com'
        // Missing required fields: lastName, phone, password, address
      };

      const response = await request(app)
        .post('/api/auth/signup')
        .send(incompleteUser)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('errors');
      expect(Array.isArray(response.body.errors)).toBe(true);
    });

    test('Should fail registration with duplicate email', async () => {
      const userData = {
        firstName: 'Marie',
        lastName: 'Tchamba',
        email: 'marie@example.com',
        phone: '+237679456789',
        password: 'SecurePass123!',
        address: 'Yaoundé',
        userType: 'client'
      };

      // Create first user
      await request(app)
        .post('/api/auth/signup')
        .send(userData)
        .expect(201);

      // Try to create duplicate user
      const response = await request(app)
        .post('/api/auth/signup')
        .send({ ...userData, phone: '+237698765432' }) // Different phone but same email
        .expect(409);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('email already exists');
    });

    test('Should fail registration with invalid Cameroon phone number', async () => {
      const userData = {
        firstName: 'John',
        lastName: 'Doe',
        email: 'john@example.com',
        phone: '+1234567890', // Invalid Cameroon number
        password: 'SecurePass123!',
        address: 'Yaoundé',
        userType: 'client'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('phone number');
    });
  });

  // ✅ USER LOGIN TESTS
  describe('POST /api/auth/Signin', () => {
    
    beforeEach(async () => {
      // Create a test user before each login test
      const hashedPassword = await bcrypt.hash('TestPass123!', 10);
      await User.create({
        firstName: 'Test',
        lastName: 'User',
        email: 'test@zerodech.cm',
        phone: '+237679123456',
        password: hashedPassword,
        address: 'Yaoundé',
        userType: 'client',
        status: 'active'
      });
    });

    test('Should login successfully with valid credentials', async () => {
      const loginData = {
        email: 'test@zerodech.cm',
        password: 'TestPass123!'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(200);

      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('message', 'Login successful');
      expect(response.body).toHaveProperty('token');
      expect(response.body).toHaveProperty('user');
      expect(response.body.user).toHaveProperty('email', loginData.email);
      expect(response.body.user).not.toHaveProperty('password');

      // Verify JWT token is valid
      const decoded = jwt.verify(response.body.token, process.env.JWT_SECRET || 'test-secret');
      expect(decoded).toHaveProperty('userId');
      expect(decoded).toHaveProperty('userType', 'client');
    });

    test('Should fail login with wrong password', async () => {
      const loginData = {
        email: 'test@zerodech.cm',
        password: 'WrongPassword123!'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('Invalid credentials');
    });

    test('Should fail login with non-existent email', async () => {
      const loginData = {
        email: 'nonexistent@example.com',
        password: 'TestPass123!'
      };

      const response = await request(app)
        .post('/api/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('Invalid credentials');
    });

    test('Should fail login with missing credentials', async () => {
      const response = await request(app)
        .post('/api/auth/login')
        .send({}) // Empty body
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('errors');
    });
  });
});

// ========================================
// tests/subscription.test.js - Subscription Creation Tests
// ========================================

const Subscription = require('../models/Subscription');
const Plan = require('../models/Plan');

describe('Subscription Management', () => {
  let authToken;
  let testUser;
  let testPlan;

  beforeEach(async () => {
    // Create test user
    const hashedPassword = await bcrypt.hash('TestPass123!', 10);
    testUser = await User.create({
      firstName: 'Marie',
      lastName: 'Tchamba',
      email: 'marie@zerodech.cm',
      phone: '+237679456789',
      password: hashedPassword,
      address: 'Nlongkak, Yaoundé',
      userType: 'client',
      status: 'active'
    });

    // Generate auth token
    authToken = jwt.sign(
      { userId: testUser._id, userType: 'client' },
      process.env.JWT_SECRET || 'test-secret',
      { expiresIn: '1h' }
    );

    // Create test plan
    testPlan = await Plan.create({
      name: 'Standard',
      price: 7000,
      duration: 30,
      features: ['Bi-weekly collection', 'SMS notifications', 'Priority support'],
      isActive: true
    });
  });

  describe('POST /api/subscription/create', () => {
    
    test('Should create subscription successfully with valid data', async () => {
      const subscriptionData = {
        planId: testPlan._id,
        billingCycle: 'monthly',
        autoRenewal: true
      };

      const response = await request(app)
        .post('/api/subscription/create')
        .set('Authorization', `Bearer ${authToken}`)
        .send(subscriptionData)
        .expect(201);

      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('message', 'Subscription created successfully');
      expect(response.body).toHaveProperty('subscription');
      expect(response.body.subscription).toHaveProperty('userId', testUser._id.toString());
      expect(response.body.subscription).toHaveProperty('planId', testPlan._id.toString());
      expect(response.body.subscription).toHaveProperty('status', 'active_pending_payment');

      // Verify subscription was saved in database
      const savedSubscription = await Subscription.findById(response.body.subscription._id);
      expect(savedSubscription).toBeTruthy();
      expect(savedSubscription.userId.toString()).toBe(testUser._id.toString());
    });

    test('Should fail subscription creation without authentication', async () => {
      const subscriptionData = {
        planId: testPlan._id,
        billingCycle: 'monthly'
      };

      const response = await request(app)
        .post('/api/subscription/create')
        // No Authorization header
        .send(subscriptionData)
        .expect(401);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('authentication');
    });

    test('Should fail subscription creation with invalid plan ID', async () => {
      const subscriptionData = {
        planId: new mongoose.Types.ObjectId(), // Non-existent plan ID
        billingCycle: 'monthly'
      };

      const response = await request(app)
        .post('/api/subscription/create')
        .set('Authorization', `Bearer ${authToken}`)
        .send(subscriptionData)
        .expect(404);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('Plan not found');
    });

    test('Should prevent duplicate active subscription for same user', async () => {
      // Create first subscription
      await Subscription.create({
        userId: testUser._id,
        planId: testPlan._id,
        status: 'active',
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now
      });

      const subscriptionData = {
        planId: testPlan._id,
        billingCycle: 'monthly'
      };

      const response = await request(app)
        .post('/api/subscription/create')
        .set('Authorization', `Bearer ${authToken}`)
        .send(subscriptionData)
        .expect(409);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body.message).toContain('active subscription already exists');
    });

    test('Should fail subscription creation with missing required fields', async () => {
      const subscriptionData = {
        // Missing planId
        billingCycle: 'monthly'
      };

      const response = await request(app)
        .post('/api/subscription/create')
        .set('Authorization', `Bearer ${authToken}`)
        .send(subscriptionData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('errors');
    });

    test('Should create subscription with correct pricing calculation', async () => {
      const subscriptionData = {
        planId: testPlan._id,
        billingCycle: 'monthly',
        discountCode: 'NEWUSER10' // 10% discount
      };

      const response = await request(app)
        .post('/api/subscription/create')
        .set('Authorization', `Bearer ${authToken}`)
        .send(subscriptionData)
        .expect(201);

      expect(response.body.subscription).toHaveProperty('basePriceFcfa', 7000);
      expect(response.body.subscription).toHaveProperty('discountPercentage', 10);
      expect(response.body.subscription).toHaveProperty('finalPriceFcfa', 6300); // 7000 - 10%
    });
  });

  describe('GET /api/subscription/user', () => {
    
    test('Should retrieve user subscriptions successfully', async () => {
      // Create test subscription
      await Subscription.create({
        userId: testUser._id,
        planId: testPlan._id,
        status: 'active',
        basePriceFcfa: 7000,
        finalPriceFcfa: 7000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
      });

      const response = await request(app)
        .get('/api/subscription/user')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('subscriptions');
      expect(Array.isArray(response.body.subscriptions)).toBe(true);
      expect(response.body.subscriptions).toHaveLength(1);
      expect(response.body.subscriptions[0]).toHaveProperty('planId');
    });
  });
});

// ========================================
// tests/api-validation.test.js - Input Validation Tests
// ========================================

describe('API Input Validation', () => {
  
  test('Should validate email format correctly', async () => {
    const testEmails = [
      { email: 'valid@example.com', shouldPass: true },
      { email: 'user@zerodech.cm', shouldPass: true },
      { email: 'invalid-email', shouldPass: false },
      { email: '@example.com', shouldPass: false },
      { email: 'user@', shouldPass: false },
      { email: '', shouldPass: false }
    ];

    for (const { email, shouldPass } of testEmails) {
      const userData = {
        firstName: 'Test',
        lastName: 'User',
        email: email,
        phone: '+237679456789',
        password: 'TestPass123!',
        address: 'Yaoundé',
        userType: 'client'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData);

      if (shouldPass) {
        expect(response.status).toBe(201);
      } else {
        expect(response.status).toBe(400);
        expect(response.body.message).toContain('email');
      }
    }
  });

  test('Should validate Cameroon phone numbers correctly', async () => {
    const testPhones = [
      { phone: '+237679456789', shouldPass: true },
      { phone: '+237698123456', shouldPass: true },
      { phone: '+237655987654', shouldPass: true },
      { phone: '679456789', shouldPass: false }, // Missing country code
      { phone: '+1234567890', shouldPass: false }, // Wrong country
      { phone: '+237123456', shouldPass: false }, // Too short
      { phone: '', shouldPass: false }
    ];

    for (const { phone, shouldPass } of testPhones) {
      const userData = {
        firstName: 'Test',
        lastName: 'User',
        email: `test${Date.now()}@example.com`,
        phone: phone,
        password: 'TestPass123!',
        address: 'Yaoundé',
        userType: 'client'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData);

      if (shouldPass) {
        expect(response.status).toBe(201);
      } else {
        expect(response.status).toBe(400);
        expect(response.body.message).toContain('phone');
      }
    }
  });
});

// ========================================
// tests/error-handling.test.js - Error Handling Tests
// ========================================

describe('Error Handling', () => {
  
  test('Should handle database connection errors gracefully', async () => {
    // Temporarily close database connection
    await mongoose.disconnect();

    const response = await request(app)
      .post('/api/auth/register')
      .send({
        firstName: 'Test',
        lastName: 'User',
        email: 'test@example.com',
        phone: '+237679456789',
        password: 'TestPass123!',
        address: 'Yaoundé',
        userType: 'client'
      })
      .expect(500);

    expect(response.body).toHaveProperty('success', false);
    expect(response.body.message).toContain('server error');

    // Reconnect for other tests
    const mongoServer = await MongoMemoryServer.create();
    await mongoose.connect(mongoServer.getUri());
  });

  test('Should handle malformed JSON requests', async () => {
    const response = await request(app)
      .post('/api/auth/register')
      .set('Content-Type', 'application/json')
      .send('invalid json data')
      .expect(400);

    expect(response.body).toHaveProperty('success', false);
    expect(response.body.message).toContain('Invalid JSON');
  });

  test('Should handle unauthorized access attempts', async () => {
    const response = await request(app)
      .get('/api/subscription/user')
      .expect(401);

    expect(response.body).toHaveProperty('success', false);
    expect(response.body.message).toContain('authentication required');
  });

  test('Should handle invalid JWT tokens', async () => {
    const response = await request(app)
      .get('/api/subscription/user')
      .set('Authorization', 'Bearer invalid-token')
      .expect(401);

    expect(response.body).toHaveProperty('success', false);
    expect(response.body.message).toContain('Invalid token');
  });
});

// ========================================
// package.json test scripts
// ========================================

/*
Add these scripts to your package.json:

{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest --testPathPattern=integration"
  },
  "jest": {
    "testEnvironment": "node",
    "setupFilesAfterEnv": ["<rootDir>/tests/setup.js"],
    "coveragePathIgnorePatterns": [
      "/node_modules/",
      "/tests/"
    ]
  }
}
*/

// ========================================
// Example test execution commands
// ========================================

/*
# Run all tests
npm test

# Run tests with coverage report
npm run test:coverage

# Run specific test file
npm test auth.test.js

# Run tests in watch mode during development
npm run test:watch

# Run tests with detailed output
npm test -- --verbose

# Expected Output:
✅ User Registration
  ✅ Should register a new user with valid data
  ✅ Should fail registration with invalid email format
  ✅ Should fail registration with missing required fields
  ✅ Should fail registration with duplicate email
  ✅ Should fail registration with invalid Cameroon phone number

✅ User Authentication  
  ✅ Should login successfully with valid credentials
  ✅ Should fail login with wrong password
  ✅ Should fail login with non-existent email
  ✅ Should fail login with missing credentials

✅ Subscription Management
  ✅ Should create subscription successfully with valid data
  ✅ Should fail subscription creation without authentication
  ✅ Should fail subscription creation with invalid plan ID
  ✅ Should prevent duplicate active subscription for same user
  ✅ Should fail subscription creation with missing required fields
  ✅ Should create subscription with correct pricing calculation

Test Suites: 4 passed, 4 total
Tests: 18 passed, 18 total
Coverage: 87.5% statements, 85.2% branches, 90.1% functions
*/

// subscription/subscription-route.js
const express = require('express');
const router = express.Router();
const { NewSubscription, GetSubscriptions, UpdateSubscription, DeleteSubscription } = require("./subscription-controller");
const { checkIfUserIsAuthenticated } = require("../middleware/authorizationMiddleware");


// Create a new subscription
router.route("/")
      .post(checkIfUserIsAuthenticated, NewSubscription)
      .get(GetSubscriptions);

// Update subscription
router.route("/:id").put(UpdateSubscription);

// Delete subscription
router.delete('/deleteSubscription/:subscription_id', DeleteSubscription);

module.exports = router;



// subscription/subscription-route.js
const { NewSubscription, GetSubscriptions, UpdateSubscription, DeleteSubscription } = require("./subscription-controller");
const { checkIfUserIsAuthenticated } = require("../middleware/authorizationMiddleware");


// Create a new subscription
router.post('/newSubscription',checkIfUserIsAuthenticated, NewSubscription);

// Get all subscriptions
router.get('/getSubscription', GetSubscriptions);

// Update subscription
router.put('/updateSubscription/:subscription_id', UpdateSubscription);

// Delete subscription
router.delete('/deleteSubscription/:subscription_id', DeleteSubscription);

module.exports = router;

//subscription/subscription-model.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Subscription Schema
const subscriptionSchema = new Schema({
    plan: {
        type: String,
        required: true
    },
    price: {
        type: String,
        required: true
    },
    duration: {
        type: String, // e.g. "1 month"
        required: true
    },
    userId: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    }],
    features: {
        type: [String],
        required: true
    },
    status: {
        type: String,
        enum: ["active", "inactive", "pending"],
        default: "pending"
    }
}, {timestamps: true});
// Create Subscription model
module.exports = mongoose.model('Subscription', subscriptionSchema);